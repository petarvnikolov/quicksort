using System.Diagnostics;
using Algorithms;

static void LogResult(int[] inputArray, int[] sortedArray, long ticks)
{
    Console.Write("{ ");

    foreach (int elem in inputArray)
    {
        Console.Write(elem + " ");
    }

    Console.Write("} ");
    Console.WriteLine("\n");

    Console.WriteLine("|> |> |>");
    Console.WriteLine();

    Console.Write("{ ");

    foreach (int elem in sortedArray)
    {
        Console.Write(elem + " ");
    }

    Console.Write("} ");
    Console.WriteLine("\n");

    Array.Sort(inputArray);

    Console.WriteLine(Enumerable.SequenceEqual(inputArray, sortedArray) ? "Sorting is correct." : "Sorting is incorrect.");
    Console.WriteLine();
    Console.WriteLine("Items: " + inputArray.Length);
    Console.WriteLine("Swaps: " + Quicksort.Swaps);
    Console.WriteLine("Time (ticks): " + ticks);
}

Stopwatch sw = new();

int[] inputArray = { 834, 447, 932, 595, 615, 656, 614, 600, 713, 787, 524, 778, 295, 956, 13, 902, 747, 887, 6, 201, 807, 243, 806, 722, 755, 874, 506, 998, 440, 388, 732, 754, 307, 759, 46, 18, 948, 381, 25, 888, 29, 234, 894, 397, 932, 778, 466, 347, 447, 791, 241, 433, 355, 573, 35, 307, 324, 564, 562, 831, 913, 903, 483, 166, 913, 21, 742, 960, 228, 954, 7, 953, 641, 350, 308, 729, 659, 634, 166, 155, 953, 37, 177, 117, 12, 296, 573, 488, 858, 617, 468, 512, 392, 739, 822, 70, 812, 914, 264, 17, 227, 126, 220, 408, 240, 251, 403, 251, 540, 633, 445, 957, 715, 862, 136, 899, 782, 386, 827, 583, 34, 28, 794, 134, 850, 892, 830, 163, 836, 880, 327, 577, 817, 747, 183, 637, 525, 319, 291, 564, 484, 675, 607, 446, 555, 189, 297, 566, 862, 313, 627, 999, 163, 960, 750, 259, 749, 480, 705, 157, 131, 333, 564, 757, 584, 826, 929, 737, 848, 820, 855, 493, 938, 887, 949, 968, 661, 241, 31, 184, 328, 490, 865, 354, 595, 396, 320, 148, 886, 419, 940, 685, 76, 998, 617, 86, 727, 230, 812, 443, 920, 231, 803, 934, 574, 270, 302, 776, 653, 481, 878, 232, 654, 569, 800, 807, 50, 738, 384, 372, 533, 310, 70, 1000, 945, 477, 484, 695, 312, 368, 390, 491, 692, 189, 457, 447, 218, 247, 479, 262, 693, 403, 149, 61, 429, 134, 222, 289, 290, 930, 846, 25, 253, 582, 233, 41, 887, 540, 453, 328, 497, 524, 62, 597, 950, 197, 583, 887, 311, 936, 623, 583, 944, 718, 937, 73, 740, 543, 979, 663, 951, 524, 106, 180, 922, 428, 940, 343, 255, 4, 316, 893, 968, 517, 602, 922, 234, 686, 402, 167, 272, 550, 887, 491, 110, 264, 997, 685, 659, 584, 127, 630, 170, 744, 807, 829, 515, 36, 914, 443, 601, 563, 258, 176, 816, 747, 437, 446, 147, 946, 490, 354, 898, 154, 338, 429, 345, 875, 680, 623, 496, 808, 616, 640, 131, 977, 604, 176, 894, 308, 429, 44, 116, 614, 991, 611, 615, 982, 331, 193, 913, 560, 535, 229, 279, 76, 531, 384, 14, 621, 79, 958, 295, 160, 601, 33, 776, 911, 6, 752, 494, 250, 852, 808, 660, 335, 142, 416, 466, 533, 725, 530, 335, 545, 159, 791, 479, 964, 311, 270, 204, 193, 549, 573, 638, 130, 971, 65, 434, 788, 392, 403, 893, 62, 952, 51, 308, 937, 481, 930, 348, 762, 396, 347, 541, 611, 529, 546, 859, 615, 805, 597, 714, 865, 306, 496, 203, 50, 628, 252, 258, 894, 535, 585, 455, 640, 634, 956, 575, 557, 975, 466, 267, 830, 664, 759, 145, 619, 769, 118, 309, 90, 160, 675, 165, 175, 950, 760, 507, 60, 122, 537, 786, 444, 641, 512, 587, 461, 19, 367, 586, 513, 856, 237, 976, 524, 315, 353, 730, 775, 661, 328, 989, 971, 952, 439, 370, 588, 767, 826, 73, 566, 129, 797, 176, 706, 853, 407, 198, 686, 164, 782, 368, 134, 724, 612, 152, 194, 285, 740, 549, 866, 379, 563, 362, 479, 690, 234, 925, 873, 40, 688, 445, 154, 338, 212, 511, 590, 363, 926, 158, 283, 439, 346, 928, 705, 36, 360, 170, 414, 255, 997, 540, 775, 289, 502, 669, 452, 663, 743, 139, 479, 431, 513, 577, 338, 138, 486, 256, 788, 831, 544, 25, 983, 419, 727, 806, 403, 481, 401, 527, 938, 526, 15, 694, 119, 260, 898, 878, 213, 873, 589, 96, 814, 222, 870, 46, 189, 49, 202, 220, 690, 879, 585, 902, 775, 571, 175, 342, 981, 520, 485, 753, 402, 862, 3, 807, 258, 216, 345, 687, 901, 970, 235, 224, 826, 825, 71, 628, 241, 66, 879, 407, 151, 374, 650, 258, 671, 735, 349, 256, 926, 473, 909, 136, 279, 903, 587, 834, 345, 728, 157, 141, 56, 3, 111, 825, 590, 523, 256, 84, 484, 113, 105, 316, 398, 549, 356, 923, 624, 29, 561, 958, 731, 181, 872, 181, 719, 129, 51, 196, 921, 917, 175, 20, 767, 212, 947, 206, 932, 995, 649, 584, 778, 193, 617, 172, 146, 583, 982, 877, 204, 921, 18, 179, 513, 544, 661, 673, 990, 675, 168, 457, 228, 216, 816, 410, 238, 686, 421, 336, 795, 334, 314, 750, 184, 710, 770, 703, 537, 17, 76, 976, 68, 349, 701, 433, 443, 829, 902, 535, 618, 547, 713, 433, 615, 122, 705, 392, 965, 909, 851, 382, 483, 367, 406, 158, 172, 410, 789, 825, 351, 181, 886, 444, 305, 933, 953, 674, 275, 672, 39, 572, 90, 798, 620, 540, 496, 180, 199, 56, 14, 444, 210, 42, 380, 672, 10, 480, 509, 671, 604, 741, 186, 317, 577, 786, 544, 742, 643, 946, 180, 728, 50, 769, 227, 135, 398, 96, 664, 8, 273, 155, 143, 942, 760, 367, 854, 18, 223, 913, 364, 88, 92, 388, 806, 746, 917, 212, 687, 389, 134, 952, 253, 348, 509, 365, 375, 253, 451, 206, 975, 972, 154, 477, 294, 75, 37, 780, 364, 907, 492, 578, 360, 635, 180, 853, 597, 466, 593, 236, 416, 403, 978, 641, 215, 855, 783, 466, 749, 201, 275, 784, 458, 811, 600, 834, 576, 956, 467, 226, 913, 564, 607, 959, 455, 829, 474, 163, 994, 277, 279, 127, 820, 556, 423, 601, 397, 506, 603, 509, 746, 76, 728, 719, 733, 72, 643, 269, 783, 875, 511, 586, 545, 961, 349, 327, 992, 387, 357, 520, 15, 788, 616, 906, 432, 933, 661, 966, 131, 545, 818, 378, 839, 598, 702, 231, 348, 36, 543, 924, 157, 525, 26, 43, 325, 510, 494, 293, 22, 956, 756, 868, 288, 805, 988, 967, 270, 150, 549, 268, 810, 628, 792, 4, 821, 650, 697, 25, 493, 590, 27, 810, 704, 463, 471, 108, 92, 402, 133, 909, 444, 810, 218, 974, 558, 557, 672, 570, 784, 485, 451, 889, 242, 853, 273, 479, 434, 722, 478 };
int[] copyArray = new int[inputArray.Length];
Array.Copy(inputArray, copyArray, copyArray.Length);

sw.Start();

// ! Use only one method at a time - the swap counter is common for all of them.

//int[] sortedArray = Quicksort.FirstPivot(copyArray, 0, copyArray.Length - 1);
// int[] sortedArray = Quicksort.MedianPivot(copyArray, 0, copyArray.Length - 1);
// int[] sortedArray = Quicksort.LastPivot(copyArray, 0, copyArray.Length - 1);
int[] sortedArray = Quicksort.RandomPivot(copyArray, 0, copyArray.Length - 1);

sw.Stop();

LogResult(inputArray, sortedArray, sw.ElapsedTicks);


